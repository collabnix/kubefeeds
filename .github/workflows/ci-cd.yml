name: ? KubeFeeds CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run every 4 hours to refresh feeds
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force refresh all feeds'
        required: false
        default: 'false'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create public directory (if needed)
      run: |
        if [ ! -d "public" ]; then
          mkdir -p public
        fi
    
    - name: Test application startup
      run: |
        echo "Starting application in background..."
        timeout 45s npm start &
        APP_PID=$!
        
        echo "Waiting for application to start..."
        sleep 15
        
        echo "Testing API endpoint..."
        if curl -f http://localhost:3000/api/stats; then
          echo "? Application started successfully"
          exit 0
        else
          echo "? Application failed to start properly"
          exit 1
        fi

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image (test build only)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: kubefeeds:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  refresh-feeds:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.force_refresh == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Ensure frontend files exist
      run: |
        if [ ! -f "public/index.html" ]; then
          echo "Frontend file missing, creating basic version..."
          mkdir -p public
          cp public/index.html public/index.html || echo "Using existing frontend"
        fi
    
    - name: Start application and refresh feeds
      run: |
        echo "? Starting feed refresh process..."
        npm start &
        APP_PID=$!
        
        # Wait for app to start
        echo "Waiting for application to initialize..."
        sleep 20
        
        # Check if app is running
        if curl -s http://localhost:3000/api/stats > /dev/null; then
          echo "? Application is running"
          
          # Trigger feed refresh
          echo "? Triggering feed refresh..."
          curl -X POST http://localhost:3000/api/refresh || echo "?? Refresh endpoint called"
          
          # Wait for feeds to be processed
          echo "? Waiting for feeds to process..."
          sleep 45
          
          # Check final stats
          echo "? Final statistics:"
          curl -s http://localhost:3000/api/stats | head -c 500 || echo "Stats not available"
        else
          echo "? Application not responding"
        fi
        
        # Stop the application
        kill $APP_PID 2>/dev/null || true
        
        echo "? Feed refresh process completed"

  validate-deployment:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate project structure
      run: |
        echo "? Validating project structure..."
        
        # Check essential files
        files=(
          "app.js"
          "package.json" 
          "Dockerfile"
          "public/index.html"
          "README.md"
        )
        
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "? $file exists"
          else
            echo "? $file missing"
            exit 1
          fi
        done
        
        echo "? All essential files present"
    
    - name: Validate package.json
      run: |
        echo "? Validating package.json..."
        node -e "
          const pkg = require('./package.json');
          console.log('Name:', pkg.name);
          console.log('Version:', pkg.version);
          console.log('Main:', pkg.main);
          
          if (!pkg.dependencies.express) {
            console.error('? Missing express dependency');
            process.exit(1);
          }
          
          console.log('? Package.json is valid');
        "

  summary:
    needs: [test, validate-deployment]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Job Summary
      run: |
        echo "# ? KubeFeeds CI/CD Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ? Job Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Test**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation**: ${{ needs.validate-deployment.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ? Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Latest Commit](${{ github.event.head_commit.url }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ? Quick Start" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Clone and run locally" >> $GITHUB_STEP_SUMMARY
        echo "git clone https://github.com/${{ github.repository }}.git" >> $GITHUB_STEP_SUMMARY
        echo "cd kubefeeds" >> $GITHUB_STEP_SUMMARY
        echo "npm install && npm start" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "? **Visit**: http://localhost:3000" >> $GITHUB_STEP_SUMMARY