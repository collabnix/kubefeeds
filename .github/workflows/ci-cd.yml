name: ? KubeFeeds CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run every 4 hours to refresh feeds
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force refresh all feeds'
        required: false
        default: 'false'

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: ? Checkout code
      uses: actions/checkout@v4
    
    - name: ? Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: ? Install dependencies
      run: |
        echo "? Installing npm dependencies..."
        npm ci
        echo "? Dependencies installed successfully"
    
    - name: ? Verify and setup project structure
      run: |
        echo "? Checking project structure..."
        
        # List current directory contents
        echo "Current directory contents:"
        ls -la
        
        # Check if public directory exists, create if not
        if [ ! -d "public" ]; then
          echo "? Creating public directory..."
          mkdir -p public
        fi
        
        # Check if index.html exists, create a basic one if not
        if [ ! -f "public/index.html" ]; then
          echo "? Creating basic index.html..."
          cat > public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KubeFeeds - Kubernetes News Aggregator</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
        .container { max-width: 800px; margin: 0 auto; text-align: center; }
        .loading { margin: 20px 0; }
        .spinner { display: inline-block; width: 20px; height: 20px; border: 3px solid rgba(255,255,255,.3); border-radius: 50%; border-top-color: #fff; animation: spin 1s ease-in-out infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
    </style>
</head>
<body>
    <div class="container">
        <h1>? KubeFeeds</h1>
        <p>Kubernetes News Aggregator</p>
        <div class="loading">
            <div class="spinner"></div>
            <p>Loading feeds...</p>
        </div>
        <div id="content"></div>
    </div>
    <script>
        async function loadContent() {
            try {
                const response = await fetch('/api/stats');
                const stats = await response.json();
                document.getElementById('content').innerHTML = `
                    <h3>? Statistics</h3>
                    <p>Total Articles: ${stats.total_articles || 0}</p>
                    <p>Sources: ${stats.total_sources || 0}</p>
                    <p>Today: ${stats.today_articles || 0}</p>
                `;
            } catch (error) {
                document.getElementById('content').innerHTML = '<p>Loading feeds in progress...</p>';
            }
        }
        setTimeout(loadContent, 2000);
    </script>
</body>
</html>
EOF
        else
          echo "? index.html already exists"
        fi
        
        # Verify all essential files exist
        files=("app.js" "package.json" "public/index.html")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "? $file exists"
          else
            echo "? $file missing"
            exit 1
          fi
        done
        
        echo "? Project structure verified"
    
    - name: ? Test application startup
      run: |
        echo "? Testing application startup..."
        
        # Start the application in background
        echo "Starting application..."
        npm start > app.log 2>&1 &
        APP_PID=$!
        echo "Application PID: $APP_PID"
        
        # Function to check if app is running
        check_app() {
          if curl -s -f http://localhost:3000/api/stats > /dev/null 2>&1; then
            return 0
          else
            return 1
          fi
        }
        
        # Wait for app to start with retry logic
        echo "Waiting for application to start..."
        MAX_ATTEMPTS=15
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."
          
          if check_app; then
            echo "? Application is responding!"
            break
          fi
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "? Application failed to start after $MAX_ATTEMPTS attempts"
            echo "? Application logs:"
            cat app.log
            echo "? Process status:"
            ps aux | grep node || echo "No node processes found"
            echo "? Network status:"
            netstat -tlnp | grep :3000 || echo "Port 3000 not in use"
            kill $APP_PID 2>/dev/null || true
            exit 1
          fi
          
          sleep 3
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        # Test API endpoints
        echo "? Testing API endpoints..."
        
        # Test stats endpoint
        if curl -s http://localhost:3000/api/stats | head -c 200; then
          echo ""
          echo "? Stats endpoint working"
        else
          echo "?? Stats endpoint not responding properly"
        fi
        
        # Test feeds endpoint
        if curl -s http://localhost:3000/api/feeds | head -c 200; then
          echo ""
          echo "? Feeds endpoint working"
        else
          echo "?? Feeds endpoint not responding properly"
        fi
        
        # Test main page
        if curl -s http://localhost:3000/ | grep -i "kubefeeds" > /dev/null; then
          echo "? Main page working"
        else
          echo "?? Main page not responding properly"
        fi
        
        # Clean shutdown
        echo "? Stopping application..."
        kill $APP_PID 2>/dev/null || true
        sleep 2
        
        echo "? Application test completed successfully!"

  feed-refresh:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.force_refresh == 'true'
    
    steps:
    - name: ? Checkout code
      uses: actions/checkout@v4
    
    - name: ? Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: ? Install dependencies
      run: npm ci
    
    - name: ? Setup project files
      run: |
        # Ensure public directory and files exist
        mkdir -p public
        if [ ! -f "public/index.html" ]; then
          cp public/index.html public/index.html 2>/dev/null || echo "Creating basic HTML file..."
        fi
    
    - name: ? Refresh feeds
      run: |
        echo "? Starting feed refresh process..."
        
        # Start application
        npm start > refresh.log 2>&1 &
        APP_PID=$!
        
        # Wait for startup
        echo "? Waiting for application to initialize..."
        sleep 20
        
        # Check if running
        if curl -s http://localhost:3000/api/stats > /dev/null; then
          echo "? Application is running"
          
          # Get initial stats
          echo "? Initial stats:"
          curl -s http://localhost:3000/api/stats | head -c 300 || echo "No initial stats"
          
          # Trigger refresh
          echo ""
          echo "? Triggering feed refresh..."
          curl -X POST http://localhost:3000/api/refresh || echo "Refresh triggered"
          
          # Wait for processing
          echo "? Processing feeds (60 seconds)..."
          sleep 60
          
          # Get final stats
          echo "? Final stats:"
          curl -s http://localhost:3000/api/stats | head -c 300 || echo "No final stats"
          
        else
          echo "? Application not responding"
          echo "? Logs:"
          cat refresh.log | tail -50
        fi
        
        # Cleanup
        kill $APP_PID 2>/dev/null || true
        echo "? Feed refresh process completed"

  docker-test:
    needs: setup-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: ? Checkout code
      uses: actions/checkout@v4
    
    - name: ? Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: ? Test Docker build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: kubefeeds:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: ? Test Docker container
      run: |
        echo "? Testing Docker container..."
        
        # Run container in background
        docker run -d --name kubefeeds-test -p 3001:3000 kubefeeds:test
        
        # Wait for startup
        sleep 15
        
        # Test container
        if curl -s http://localhost:3001/api/stats > /dev/null; then
          echo "? Docker container working!"
        else
          echo "? Docker container test failed"
          docker logs kubefeeds-test
          exit 1
        fi
        
        # Cleanup
        docker stop kubefeeds-test
        docker rm kubefeeds-test

  summary:
    needs: [setup-and-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: ? Workflow Summary
      run: |
        echo "# ? KubeFeeds CI/CD Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ? Job Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Setup & Test | ${{ needs.setup-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.setup-and-test.result }}" = "success" ]; then
          echo "## ? Success!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The KubeFeeds application is working correctly!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ? Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the job logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ? Quick Start" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "git clone https://github.com/${{ github.repository }}.git" >> $GITHUB_STEP_SUMMARY
        echo "cd kubefeeds" >> $GITHUB_STEP_SUMMARY
        echo "npm install && npm start" >> $GITHUB_STEP_SUMMARY
        echo "# Visit http://localhost:3000" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY